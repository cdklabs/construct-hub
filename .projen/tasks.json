{
  "tasks": {
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "rm -rf ./website"
        },
        {
          "exec": "cp -r ./node_modules/construct-hub-webapp/build ./website"
        },
        {
          "exec": "jsii --silence-warnings=reserved-word --no-fix-peer-dependencies"
        },
        {
          "spawn": "docgen"
        },
        {
          "spawn": "bundle:catalog-builder-mock"
        },
        {
          "spawn": "bundle:trigger.client-test"
        },
        {
          "spawn": "bundle:trigger.prune-test"
        },
        {
          "spawn": "bundle:catalog-builder"
        },
        {
          "spawn": "bundle:prune-handler"
        },
        {
          "spawn": "bundle:prune-queue-handler"
        },
        {
          "spawn": "bundle:ingestion"
        },
        {
          "spawn": "bundle:canary"
        },
        {
          "spawn": "bundle:redrive-state-machine"
        },
        {
          "spawn": "bundle:reprocess-all"
        },
        {
          "spawn": "bundle:certificate-monitor"
        },
        {
          "spawn": "bundle:http-get-function"
        },
        {
          "spawn": "bundle:code-artifact-forwarder"
        },
        {
          "spawn": "bundle:npm-js-follower"
        },
        {
          "spawn": "bundle:handler"
        },
        {
          "spawn": "bundle:transliterator"
        }
      ]
    },
    "test:compile": {
      "name": "test:compile",
      "description": "compiles the test code"
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "test:compile"
        },
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot"
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ:deny-list:assert"
        }
      ]
    },
    "build": {
      "name": "build",
      "description": "Full release build (test+compile)",
      "steps": [
        {
          "exec": "npx projen"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt"
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt"
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "publish:github": {
      "name": "publish:github",
      "description": "Publish this package to GitHub Releases",
      "requiredEnv": [
        "GITHUB_TOKEN",
        "GITHUB_REPOSITORY",
        "GITHUB_REF"
      ],
      "steps": [
        {
          "exec": "errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \"Release.tag_name already exists\" $errout; then cat $errout; exit $exitcode; fi"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm-check-updates --upgrade --target=minor --reject='@aws-cdk/aws-certificatemanager,@aws-cdk/aws-cloudfront-origins,@aws-cdk/aws-cloudfront,@aws-cdk/aws-cloudwatch-actions,@aws-cdk/aws-cloudwatch,@aws-cdk/aws-codeartifact,@aws-cdk/aws-ec2,@aws-cdk/aws-ecs,@aws-cdk/aws-events,@aws-cdk/aws-events-targets,@aws-cdk/assets,@aws-cdk/aws-iam,@aws-cdk/aws-lambda-event-sources,@aws-cdk/aws-lambda,@aws-cdk/aws-logs,@aws-cdk/aws-route53-targets,@aws-cdk/aws-route53,@aws-cdk/aws-s3-deployment,@aws-cdk/aws-s3,@aws-cdk/aws-s3-notifications,@aws-cdk/aws-sns,@aws-cdk/aws-sqs,@aws-cdk/aws-stepfunctions,@aws-cdk/aws-stepfunctions-tasks,@aws-cdk/core,@aws-cdk/custom-resources,@aws-cdk/cx-api,cdk-watchful,constructs,@aws-cdk/assert,aws-cdk'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @jsii/spec @types/aws-lambda @types/fs-extra @types/jest @types/node @types/semver @types/tar-stream @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-embedded-metrics aws-sdk aws-sdk-mock aws-xray-sdk-core case cdk-triggers construct-hub-webapp esbuild eslint eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import fs-extra glob got jest jest-junit jsii jsii-diff jsii-docgen jsii-pacmak json-schema nano normalize-registry-metadata npm-check-updates projen semver spdx-license-list standard-version tar-stream typescript yaml"
        },
        {
          "exec": "npx projen"
        }
      ]
    },
    "default": {
      "name": "default",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word --no-fix-peer-dependencies"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Create an npm tarball",
      "steps": [
        {
          "exec": "jsii-pacmak"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src src/__tests__ build-tools .projenrc.js"
        }
      ]
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "publish:npm": {
      "name": "publish:npm",
      "description": "Publish this package to npm",
      "env": {
        "NPM_DIST_TAG": "latest",
        "NPM_REGISTRY": "registry.npmjs.org"
      },
      "requiredEnv": [
        "NPM_TOKEN"
      ],
      "steps": [
        {
          "exec": "npx -p jsii-release@latest jsii-release-npm"
        }
      ]
    },
    "publish:pypi": {
      "name": "publish:pypi",
      "description": "Publish this package to PyPI",
      "requiredEnv": [
        "TWINE_USERNAME",
        "TWINE_PASSWORD"
      ],
      "steps": [
        {
          "exec": "npx -p jsii-release@latest jsii-release-pypi"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Bundle all lambda functions",
      "steps": [
        {
          "spawn": "bundle:catalog-builder-mock"
        },
        {
          "spawn": "bundle:trigger.client-test"
        },
        {
          "spawn": "bundle:trigger.prune-test"
        },
        {
          "spawn": "bundle:catalog-builder"
        },
        {
          "spawn": "bundle:prune-handler"
        },
        {
          "spawn": "bundle:prune-queue-handler"
        },
        {
          "spawn": "bundle:ingestion"
        },
        {
          "spawn": "bundle:canary"
        },
        {
          "spawn": "bundle:redrive-state-machine"
        },
        {
          "spawn": "bundle:reprocess-all"
        },
        {
          "spawn": "bundle:certificate-monitor"
        },
        {
          "spawn": "bundle:http-get-function"
        },
        {
          "spawn": "bundle:code-artifact-forwarder"
        },
        {
          "spawn": "bundle:npm-js-follower"
        },
        {
          "spawn": "bundle:handler"
        },
        {
          "spawn": "bundle:transliterator"
        }
      ]
    },
    "dev:synth": {
      "name": "dev:synth",
      "description": "cdk synth",
      "steps": [
        {
          "exec": "npx cdk synth"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "dev:diff": {
      "name": "dev:diff",
      "description": "cdk diff",
      "steps": [
        {
          "exec": "npx cdk diff"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "dev:deploy": {
      "name": "dev:deploy",
      "description": "cdk deploy",
      "steps": [
        {
          "exec": "npx cdk deploy"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "dev:destroy": {
      "name": "dev:destroy",
      "description": "cdk destroy",
      "steps": [
        {
          "exec": "npx cdk destroy"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "dev:bootstrap": {
      "name": "dev:bootstrap",
      "description": "cdk bootstrap",
      "steps": [
        {
          "exec": "npx cdk bootstrap"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "bundle:catalog-builder-mock": {
      "name": "bundle:catalog-builder-mock",
      "description": "Create an AWS Lambda bundle from src/__tests__/backend/deny-list/integ/catalog-builder-mock.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/__tests__/backend/deny-list/integ/catalog-builder-mock.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/__tests__/backend/deny-list/integ/catalog-builder-mock.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:trigger.client-test": {
      "name": "bundle:trigger.client-test",
      "description": "Create an AWS Lambda bundle from src/__tests__/backend/deny-list/integ/trigger.client-test.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/__tests__/backend/deny-list/integ/trigger.client-test.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/__tests__/backend/deny-list/integ/trigger.client-test.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:trigger.prune-test": {
      "name": "bundle:trigger.prune-test",
      "description": "Create an AWS Lambda bundle from src/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/__tests__/backend/deny-list/integ/trigger.prune-test.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:catalog-builder": {
      "name": "bundle:catalog-builder",
      "description": "Create an AWS Lambda bundle from src/backend/catalog-builder/catalog-builder.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/catalog-builder/catalog-builder.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/backend/catalog-builder/catalog-builder.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:prune-handler": {
      "name": "bundle:prune-handler",
      "description": "Create an AWS Lambda bundle from src/backend/deny-list/prune-handler.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/deny-list/prune-handler.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/backend/deny-list/prune-handler.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:prune-queue-handler": {
      "name": "bundle:prune-queue-handler",
      "description": "Create an AWS Lambda bundle from src/backend/deny-list/prune-queue-handler.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/deny-list/prune-queue-handler.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/backend/deny-list/prune-queue-handler.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:ingestion": {
      "name": "bundle:ingestion",
      "description": "Create an AWS Lambda bundle from src/backend/ingestion/ingestion.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/ingestion/ingestion.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/backend/ingestion/ingestion.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:canary": {
      "name": "bundle:canary",
      "description": "Create an AWS Lambda bundle from src/backend/inventory/canary.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/inventory/canary.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/backend/inventory/canary.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:redrive-state-machine": {
      "name": "bundle:redrive-state-machine",
      "description": "Create an AWS Lambda bundle from src/backend/orchestration/redrive-state-machine.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/orchestration/redrive-state-machine.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/backend/orchestration/redrive-state-machine.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:reprocess-all": {
      "name": "bundle:reprocess-all",
      "description": "Create an AWS Lambda bundle from src/backend/orchestration/reprocess-all.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/orchestration/reprocess-all.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/backend/orchestration/reprocess-all.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:certificate-monitor": {
      "name": "bundle:certificate-monitor",
      "description": "Create an AWS Lambda bundle from src/monitored-certificate/certificate-monitor.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/monitored-certificate/certificate-monitor.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/monitored-certificate/certificate-monitor.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:http-get-function": {
      "name": "bundle:http-get-function",
      "description": "Create an AWS Lambda bundle from src/monitoring/http-get-function.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/monitoring/http-get-function.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/monitoring/http-get-function.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:code-artifact-forwarder": {
      "name": "bundle:code-artifact-forwarder",
      "description": "Create an AWS Lambda bundle from src/package-sources/codeartifact/code-artifact-forwarder.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/codeartifact/code-artifact-forwarder.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/package-sources/codeartifact/code-artifact-forwarder.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:npm-js-follower": {
      "name": "bundle:npm-js-follower",
      "description": "Create an AWS Lambda bundle from src/package-sources/npmjs/npm-js-follower.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/npmjs/npm-js-follower.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/package-sources/npmjs/npm-js-follower.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:handler": {
      "name": "bundle:handler",
      "description": "Create an AWS Lambda bundle from src/webapp/cache-invalidator/handler.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/webapp/cache-invalidator/handler.lambda.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/webapp/cache-invalidator/handler.bundle/index.js\" --external:aws-sdk"
        }
      ]
    },
    "bundle:transliterator": {
      "name": "bundle:transliterator",
      "description": "Create an AWS Fargate bundle from src/backend/transliterator/transliterator.ecstask.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/transliterator/transliterator.ecstask.ts --target=\"node14\" --platform=\"node\" --outfile=\"lib/backend/transliterator/transliterator.bundle/index.js\""
        }
      ]
    },
    "integ:deny-list:deploy": {
      "name": "integ:deny-list:deploy",
      "description": "deploy integration test __tests__/backend/deny-list/integ/deny-list.integ.ts",
      "steps": [
        {
          "exec": "rm -fr src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.deploy"
        },
        {
          "exec": "cdk deploy --app \"node lib/__tests__/backend/deny-list/integ/deny-list.integ.js\" --no-version-reporting --require-approval=never -o src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.deploy"
        },
        {
          "exec": "rm -fr src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout"
        },
        {
          "exec": "mv src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.deploy src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout"
        },
        {
          "spawn": "integ:deny-list:destroy"
        }
      ]
    },
    "integ:deny-list:destroy": {
      "name": "integ:deny-list:destroy",
      "description": "destroy integration test __tests__/backend/deny-list/integ/deny-list.integ.ts",
      "steps": [
        {
          "exec": "cdk destroy --app src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout"
        }
      ]
    },
    "integ:deny-list:assert": {
      "name": "integ:deny-list:assert",
      "description": "synthesize integration test __tests__/backend/deny-list/integ/deny-list.integ.ts",
      "steps": [
        {
          "exec": "cdk synth --app \"node lib/__tests__/backend/deny-list/integ/deny-list.integ.js\" --no-version-reporting -o src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.actual > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout/ src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.actual/"
        }
      ]
    },
    "integ:deny-list:snapshot": {
      "name": "integ:deny-list:snapshot",
      "description": "update snapshot for integration test __tests__/backend/deny-list/integ/deny-list.integ.ts",
      "steps": [
        {
          "exec": "cdk synth --app \"node lib/__tests__/backend/deny-list/integ/deny-list.integ.js\" --no-version-reporting -o src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout > /dev/null"
        }
      ]
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
