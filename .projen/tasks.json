{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep '^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+'"
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "bundle": {
      "name": "bundle",
      "description": "Bundle all lambda and ECS functions",
      "steps": [
        {
          "spawn": "bundle:stage-and-notify"
        },
        {
          "spawn": "bundle:npm-js-follower"
        },
        {
          "spawn": "bundle:npmjs-package-canary"
        },
        {
          "spawn": "bundle:code-artifact-forwarder"
        },
        {
          "spawn": "bundle:sqs-dlq-stats-widget-function"
        },
        {
          "spawn": "bundle:http-get-function"
        },
        {
          "spawn": "bundle:certificate-monitor"
        },
        {
          "spawn": "bundle:version-tracker"
        },
        {
          "spawn": "bundle:release-notes-trigger"
        },
        {
          "spawn": "bundle:get-messages-from-worker-queue"
        },
        {
          "spawn": "bundle:generate-release-notes"
        },
        {
          "spawn": "bundle:package-stats"
        },
        {
          "spawn": "bundle:redrive-state-machine"
        },
        {
          "spawn": "bundle:needs-catalog-update"
        },
        {
          "spawn": "bundle:package-versions-table-widget-function"
        },
        {
          "spawn": "bundle:canary"
        },
        {
          "spawn": "bundle:re-ingest"
        },
        {
          "spawn": "bundle:ingestion"
        },
        {
          "spawn": "bundle:update-feed"
        },
        {
          "spawn": "bundle:monitor"
        },
        {
          "spawn": "bundle:prune-queue-handler"
        },
        {
          "spawn": "bundle:prune-handler"
        },
        {
          "spawn": "bundle:catalog-builder"
        },
        {
          "spawn": "bundle:trigger.prune-test"
        },
        {
          "spawn": "bundle:trigger.client-test"
        },
        {
          "spawn": "bundle:catalog-builder-mock"
        },
        {
          "spawn": "bundle:transliterator"
        }
      ]
    },
    "bundle:canary": {
      "name": "bundle:canary",
      "description": "Create an AWS Lambda bundle from src/backend/inventory/canary.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/inventory/canary.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/inventory/canary.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:canary:watch": {
      "name": "bundle:canary:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/inventory/canary.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/inventory/canary.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/inventory/canary.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:catalog-builder": {
      "name": "bundle:catalog-builder",
      "description": "Create an AWS Lambda bundle from src/backend/catalog-builder/catalog-builder.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/catalog-builder/catalog-builder.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/catalog-builder/catalog-builder.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:catalog-builder-mock": {
      "name": "bundle:catalog-builder-mock",
      "description": "Create an AWS Lambda bundle from src/__tests__/backend/deny-list/integ/catalog-builder-mock.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/__tests__/backend/deny-list/integ/catalog-builder-mock.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/__tests__/backend/deny-list/integ/catalog-builder-mock.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:catalog-builder-mock:watch": {
      "name": "bundle:catalog-builder-mock:watch",
      "description": "Continuously update an AWS Lambda bundle from src/__tests__/backend/deny-list/integ/catalog-builder-mock.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/__tests__/backend/deny-list/integ/catalog-builder-mock.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/__tests__/backend/deny-list/integ/catalog-builder-mock.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:catalog-builder:watch": {
      "name": "bundle:catalog-builder:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/catalog-builder/catalog-builder.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/catalog-builder/catalog-builder.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/catalog-builder/catalog-builder.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:certificate-monitor": {
      "name": "bundle:certificate-monitor",
      "description": "Create an AWS Lambda bundle from src/monitored-certificate/certificate-monitor.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/monitored-certificate/certificate-monitor.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/monitored-certificate/certificate-monitor.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:certificate-monitor:watch": {
      "name": "bundle:certificate-monitor:watch",
      "description": "Continuously update an AWS Lambda bundle from src/monitored-certificate/certificate-monitor.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/monitored-certificate/certificate-monitor.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/monitored-certificate/certificate-monitor.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:code-artifact-forwarder": {
      "name": "bundle:code-artifact-forwarder",
      "description": "Create an AWS Lambda bundle from src/package-sources/codeartifact/code-artifact-forwarder.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/codeartifact/code-artifact-forwarder.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/package-sources/codeartifact/code-artifact-forwarder.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:code-artifact-forwarder:watch": {
      "name": "bundle:code-artifact-forwarder:watch",
      "description": "Continuously update an AWS Lambda bundle from src/package-sources/codeartifact/code-artifact-forwarder.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/codeartifact/code-artifact-forwarder.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/package-sources/codeartifact/code-artifact-forwarder.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:fargate:watch": {
      "name": "bundle:fargate:watch",
      "description": "Continuously bundle all AWS Fargate functions",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/transliterator/transliterator.ecs-entrypoint.ts --target=\"node18\" --platform=\"node\" --outbase=\"src\" --outdir=\"lib\" --entry-names=\"[dir]/[name].bundle/index\" --external:aws-sdk --sourcemap --watch"
        }
      ]
    },
    "bundle:generate-release-notes": {
      "name": "bundle:generate-release-notes",
      "description": "Create an AWS Lambda bundle from src/backend/release-notes/generate-release-notes.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/release-notes/generate-release-notes.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/release-notes/generate-release-notes.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:generate-release-notes:watch": {
      "name": "bundle:generate-release-notes:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/release-notes/generate-release-notes.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/release-notes/generate-release-notes.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/release-notes/generate-release-notes.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:get-messages-from-worker-queue": {
      "name": "bundle:get-messages-from-worker-queue",
      "description": "Create an AWS Lambda bundle from src/backend/release-notes/get-messages-from-worker-queue.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/release-notes/get-messages-from-worker-queue.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/release-notes/get-messages-from-worker-queue.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:get-messages-from-worker-queue:watch": {
      "name": "bundle:get-messages-from-worker-queue:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/release-notes/get-messages-from-worker-queue.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/release-notes/get-messages-from-worker-queue.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/release-notes/get-messages-from-worker-queue.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:http-get-function": {
      "name": "bundle:http-get-function",
      "description": "Create an AWS Lambda bundle from src/monitoring/http-get-function.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/monitoring/http-get-function.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/monitoring/http-get-function.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:http-get-function:watch": {
      "name": "bundle:http-get-function:watch",
      "description": "Continuously update an AWS Lambda bundle from src/monitoring/http-get-function.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/monitoring/http-get-function.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/monitoring/http-get-function.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:ingestion": {
      "name": "bundle:ingestion",
      "description": "Create an AWS Lambda bundle from src/backend/ingestion/ingestion.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/ingestion/ingestion.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/ingestion/ingestion.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:ingestion:watch": {
      "name": "bundle:ingestion:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/ingestion/ingestion.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/ingestion/ingestion.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/ingestion/ingestion.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:lambda:watch": {
      "name": "bundle:lambda:watch",
      "description": "Continuously bundle all AWS Lambda functions",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/npmjs/stage-and-notify.lambda.ts src/package-sources/npmjs/npm-js-follower.lambda.ts src/package-sources/npmjs/canary/npmjs-package-canary.lambda.ts src/package-sources/codeartifact/code-artifact-forwarder.lambda.ts src/overview-dashboard/sqs-dlq-stats-widget-function.lambda.ts src/monitoring/http-get-function.lambda.ts src/monitored-certificate/certificate-monitor.lambda.ts src/backend/version-tracker/version-tracker.lambda.ts src/backend/release-notes/release-notes-trigger.lambda.ts src/backend/release-notes/get-messages-from-worker-queue.lambda.ts src/backend/release-notes/generate-release-notes.lambda.ts src/backend/package-stats/package-stats.lambda.ts src/backend/orchestration/redrive-state-machine.lambda.ts src/backend/orchestration/needs-catalog-update.lambda.ts src/backend/inventory/package-versions-table-widget-function.lambda.ts src/backend/inventory/canary.lambda.ts src/backend/ingestion/re-ingest.lambda.ts src/backend/ingestion/ingestion.lambda.ts src/backend/feed-builder/update-feed.lambda.ts src/backend/ecs-task-monitor/monitor.lambda.ts src/backend/deny-list/prune-queue-handler.lambda.ts src/backend/deny-list/prune-handler.lambda.ts src/backend/catalog-builder/catalog-builder.lambda.ts src/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.ts src/__tests__/backend/deny-list/integ/trigger.client-test.lambda.ts src/__tests__/backend/deny-list/integ/catalog-builder-mock.lambda.ts --target=\"node14\" --platform=\"node\" --outbase=\"src\" --outdir=\"lib\" --entry-names=\"[dir]/[name].bundle/index\" --external:aws-sdk --sourcemap --watch --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:monitor": {
      "name": "bundle:monitor",
      "description": "Create an AWS Lambda bundle from src/backend/ecs-task-monitor/monitor.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/ecs-task-monitor/monitor.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/ecs-task-monitor/monitor.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:monitor:watch": {
      "name": "bundle:monitor:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/ecs-task-monitor/monitor.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/ecs-task-monitor/monitor.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/ecs-task-monitor/monitor.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:needs-catalog-update": {
      "name": "bundle:needs-catalog-update",
      "description": "Create an AWS Lambda bundle from src/backend/orchestration/needs-catalog-update.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/orchestration/needs-catalog-update.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/orchestration/needs-catalog-update.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:needs-catalog-update:watch": {
      "name": "bundle:needs-catalog-update:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/orchestration/needs-catalog-update.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/orchestration/needs-catalog-update.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/orchestration/needs-catalog-update.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:npm-js-follower": {
      "name": "bundle:npm-js-follower",
      "description": "Create an AWS Lambda bundle from src/package-sources/npmjs/npm-js-follower.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/npmjs/npm-js-follower.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/package-sources/npmjs/npm-js-follower.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:npm-js-follower:watch": {
      "name": "bundle:npm-js-follower:watch",
      "description": "Continuously update an AWS Lambda bundle from src/package-sources/npmjs/npm-js-follower.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/npmjs/npm-js-follower.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/package-sources/npmjs/npm-js-follower.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:npmjs-package-canary": {
      "name": "bundle:npmjs-package-canary",
      "description": "Create an AWS Lambda bundle from src/package-sources/npmjs/canary/npmjs-package-canary.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/npmjs/canary/npmjs-package-canary.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/package-sources/npmjs/canary/npmjs-package-canary.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:npmjs-package-canary:watch": {
      "name": "bundle:npmjs-package-canary:watch",
      "description": "Continuously update an AWS Lambda bundle from src/package-sources/npmjs/canary/npmjs-package-canary.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/npmjs/canary/npmjs-package-canary.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/package-sources/npmjs/canary/npmjs-package-canary.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:package-stats": {
      "name": "bundle:package-stats",
      "description": "Create an AWS Lambda bundle from src/backend/package-stats/package-stats.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/package-stats/package-stats.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/package-stats/package-stats.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:package-stats:watch": {
      "name": "bundle:package-stats:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/package-stats/package-stats.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/package-stats/package-stats.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/package-stats/package-stats.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:package-versions-table-widget-function": {
      "name": "bundle:package-versions-table-widget-function",
      "description": "Create an AWS Lambda bundle from src/backend/inventory/package-versions-table-widget-function.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/inventory/package-versions-table-widget-function.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/inventory/package-versions-table-widget-function.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:package-versions-table-widget-function:watch": {
      "name": "bundle:package-versions-table-widget-function:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/inventory/package-versions-table-widget-function.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/inventory/package-versions-table-widget-function.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/inventory/package-versions-table-widget-function.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:prune-handler": {
      "name": "bundle:prune-handler",
      "description": "Create an AWS Lambda bundle from src/backend/deny-list/prune-handler.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/deny-list/prune-handler.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/deny-list/prune-handler.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:prune-handler:watch": {
      "name": "bundle:prune-handler:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/deny-list/prune-handler.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/deny-list/prune-handler.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/deny-list/prune-handler.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:prune-queue-handler": {
      "name": "bundle:prune-queue-handler",
      "description": "Create an AWS Lambda bundle from src/backend/deny-list/prune-queue-handler.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/deny-list/prune-queue-handler.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/deny-list/prune-queue-handler.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:prune-queue-handler:watch": {
      "name": "bundle:prune-queue-handler:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/deny-list/prune-queue-handler.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/deny-list/prune-queue-handler.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/deny-list/prune-queue-handler.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:re-ingest": {
      "name": "bundle:re-ingest",
      "description": "Create an AWS Lambda bundle from src/backend/ingestion/re-ingest.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/ingestion/re-ingest.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/ingestion/re-ingest.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:re-ingest:watch": {
      "name": "bundle:re-ingest:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/ingestion/re-ingest.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/ingestion/re-ingest.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/ingestion/re-ingest.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:redrive-state-machine": {
      "name": "bundle:redrive-state-machine",
      "description": "Create an AWS Lambda bundle from src/backend/orchestration/redrive-state-machine.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/orchestration/redrive-state-machine.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/orchestration/redrive-state-machine.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:redrive-state-machine:watch": {
      "name": "bundle:redrive-state-machine:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/orchestration/redrive-state-machine.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/orchestration/redrive-state-machine.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/orchestration/redrive-state-machine.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:release-notes-trigger": {
      "name": "bundle:release-notes-trigger",
      "description": "Create an AWS Lambda bundle from src/backend/release-notes/release-notes-trigger.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/release-notes/release-notes-trigger.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/release-notes/release-notes-trigger.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:release-notes-trigger:watch": {
      "name": "bundle:release-notes-trigger:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/release-notes/release-notes-trigger.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/release-notes/release-notes-trigger.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/release-notes/release-notes-trigger.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:sqs-dlq-stats-widget-function": {
      "name": "bundle:sqs-dlq-stats-widget-function",
      "description": "Create an AWS Lambda bundle from src/overview-dashboard/sqs-dlq-stats-widget-function.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/overview-dashboard/sqs-dlq-stats-widget-function.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/overview-dashboard/sqs-dlq-stats-widget-function.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:sqs-dlq-stats-widget-function:watch": {
      "name": "bundle:sqs-dlq-stats-widget-function:watch",
      "description": "Continuously update an AWS Lambda bundle from src/overview-dashboard/sqs-dlq-stats-widget-function.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/overview-dashboard/sqs-dlq-stats-widget-function.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/overview-dashboard/sqs-dlq-stats-widget-function.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:stage-and-notify": {
      "name": "bundle:stage-and-notify",
      "description": "Create an AWS Lambda bundle from src/package-sources/npmjs/stage-and-notify.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/npmjs/stage-and-notify.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/package-sources/npmjs/stage-and-notify.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:stage-and-notify:watch": {
      "name": "bundle:stage-and-notify:watch",
      "description": "Continuously update an AWS Lambda bundle from src/package-sources/npmjs/stage-and-notify.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/package-sources/npmjs/stage-and-notify.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/package-sources/npmjs/stage-and-notify.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:transliterator": {
      "name": "bundle:transliterator",
      "description": "Create an AWS Fargate bundle from src/backend/transliterator/transliterator.ecstask.ts",
      "env": {
        "BUNDLE_DIR": "lib/backend/transliterator/transliterator.ecs-entrypoint.bundle"
      },
      "steps": [
        {
          "exec": "ts-node projenrc/bundle-javascript-for-ecs.exec.ts src/backend/transliterator/transliterator.ecs-entrypoint.ts lib/backend/transliterator/transliterator.ecs-entrypoint.bundle/index.js"
        },
        {
          "exec": "ts-node projenrc/bundle-javascript-for-ecs.exec.ts node_modules/jsii-rosetta/lib/translate_all_worker.js lib/backend/transliterator/transliterator.ecs-entrypoint.bundle/translate_all_worker.js"
        }
      ]
    },
    "bundle:transliterator:watch": {
      "name": "bundle:transliterator:watch",
      "description": "Continuously update an AWS Fargate bundle from src/backend/transliterator/transliterator.ecstask.ts",
      "env": {
        "BUNDLE_DIR": "lib/backend/transliterator/transliterator.ecs-entrypoint.bundle"
      },
      "steps": [
        {
          "exec": "ts-node projenrc/bundle-javascript-for-ecs.exec.ts node_modules/jsii-rosetta/lib/translate_all_worker.js lib/backend/transliterator/transliterator.ecs-entrypoint.bundle/translate_all_worker.js"
        },
        {
          "exec": "ts-node projenrc/bundle-javascript-for-ecs.exec.ts src/backend/transliterator/transliterator.ecs-entrypoint.ts lib/backend/transliterator/transliterator.ecs-entrypoint.bundle/index.js --watch"
        }
      ]
    },
    "bundle:trigger.client-test": {
      "name": "bundle:trigger.client-test",
      "description": "Create an AWS Lambda bundle from src/__tests__/backend/deny-list/integ/trigger.client-test.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/__tests__/backend/deny-list/integ/trigger.client-test.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/__tests__/backend/deny-list/integ/trigger.client-test.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:trigger.client-test:watch": {
      "name": "bundle:trigger.client-test:watch",
      "description": "Continuously update an AWS Lambda bundle from src/__tests__/backend/deny-list/integ/trigger.client-test.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/__tests__/backend/deny-list/integ/trigger.client-test.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/__tests__/backend/deny-list/integ/trigger.client-test.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:trigger.prune-test": {
      "name": "bundle:trigger.prune-test",
      "description": "Create an AWS Lambda bundle from src/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:trigger.prune-test:watch": {
      "name": "bundle:trigger.prune-test:watch",
      "description": "Continuously update an AWS Lambda bundle from src/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:update-feed": {
      "name": "bundle:update-feed",
      "description": "Create an AWS Lambda bundle from src/backend/feed-builder/update-feed.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/feed-builder/update-feed.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/feed-builder/update-feed.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:update-feed:watch": {
      "name": "bundle:update-feed:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/feed-builder/update-feed.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/feed-builder/update-feed.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/feed-builder/update-feed.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "bundle:version-tracker": {
      "name": "bundle:version-tracker",
      "description": "Create an AWS Lambda bundle from src/backend/version-tracker/version-tracker.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/version-tracker/version-tracker.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/version-tracker/version-tracker.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json"
        }
      ]
    },
    "bundle:version-tracker:watch": {
      "name": "bundle:version-tracker:watch",
      "description": "Continuously update an AWS Lambda bundle from src/backend/version-tracker/version-tracker.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/backend/version-tracker/version-tracker.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"lib/backend/version-tracker/version-tracker.lambda.bundle/index.js\" --external:aws-sdk --sourcemap --tsconfig=tsconfig.dev.json --watch"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "rm -rf ./website"
        },
        {
          "exec": "cp -r ./node_modules/construct-hub-webapp/build ./website"
        },
        {
          "exec": "jsii --silence-warnings=reserved-word"
        },
        {
          "spawn": "bundle:stage-and-notify"
        },
        {
          "spawn": "bundle:npm-js-follower"
        },
        {
          "spawn": "bundle:npmjs-package-canary"
        },
        {
          "spawn": "bundle:code-artifact-forwarder"
        },
        {
          "spawn": "bundle:sqs-dlq-stats-widget-function"
        },
        {
          "spawn": "bundle:http-get-function"
        },
        {
          "spawn": "bundle:certificate-monitor"
        },
        {
          "spawn": "bundle:version-tracker"
        },
        {
          "spawn": "bundle:release-notes-trigger"
        },
        {
          "spawn": "bundle:get-messages-from-worker-queue"
        },
        {
          "spawn": "bundle:generate-release-notes"
        },
        {
          "spawn": "bundle:package-stats"
        },
        {
          "spawn": "bundle:redrive-state-machine"
        },
        {
          "spawn": "bundle:needs-catalog-update"
        },
        {
          "spawn": "bundle:package-versions-table-widget-function"
        },
        {
          "spawn": "bundle:canary"
        },
        {
          "spawn": "bundle:re-ingest"
        },
        {
          "spawn": "bundle:ingestion"
        },
        {
          "spawn": "bundle:update-feed"
        },
        {
          "spawn": "bundle:monitor"
        },
        {
          "spawn": "bundle:prune-queue-handler"
        },
        {
          "spawn": "bundle:prune-handler"
        },
        {
          "spawn": "bundle:catalog-builder"
        },
        {
          "spawn": "bundle:trigger.prune-test"
        },
        {
          "spawn": "bundle:trigger.client-test"
        },
        {
          "spawn": "bundle:catalog-builder-mock"
        },
        {
          "spawn": "bundle:transliterator"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "dev:bootstrap": {
      "name": "dev:bootstrap",
      "description": "cdk bootstrap",
      "steps": [
        {
          "exec": "npx cdk bootstrap"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "dev:deploy": {
      "name": "dev:deploy",
      "description": "cdk deploy",
      "steps": [
        {
          "exec": "npx cdk deploy"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "dev:destroy": {
      "name": "dev:destroy",
      "description": "cdk destroy",
      "steps": [
        {
          "exec": "npx cdk destroy"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "dev:diff": {
      "name": "dev:diff",
      "description": "cdk diff",
      "steps": [
        {
          "exec": "npx cdk diff"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "dev:hotswap": {
      "name": "dev:hotswap",
      "description": "cdk deploy --hotswap",
      "steps": [
        {
          "exec": "npx cdk deploy --hotswap"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "dev:synth": {
      "name": "dev:synth",
      "description": "cdk synth",
      "steps": [
        {
          "exec": "npx cdk synth"
        }
      ],
      "cwd": "lib/__tests__/devapp"
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src src/__tests__ build-tools projenrc .projenrc.ts",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "integ": {
      "name": "integ",
      "description": "Run integration snapshot tests",
      "steps": [
        {
          "exec": "yarn integ-runner --language typescript",
          "receiveArgs": true
        }
      ]
    },
    "integ:deny-list:assert": {
      "name": "integ:deny-list:assert",
      "description": "synthesize integration test __tests__/backend/deny-list/integ/deny-list.integ.ts",
      "steps": [
        {
          "exec": "cdk synth --app \"node lib/__tests__/backend/deny-list/integ/deny-list.integ.js\" --no-version-reporting --context @aws-cdk/core:newStyleStackSynthesis=true -o src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.actual > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json -x .cache src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout/ src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.actual/"
        }
      ]
    },
    "integ:deny-list:deploy": {
      "name": "integ:deny-list:deploy",
      "description": "deploy integration test __tests__/backend/deny-list/integ/deny-list.integ.ts",
      "steps": [
        {
          "exec": "rm -fr src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.deploy"
        },
        {
          "exec": "cdk deploy --app \"node lib/__tests__/backend/deny-list/integ/deny-list.integ.js\" --no-version-reporting --context @aws-cdk/core:newStyleStackSynthesis=true --require-approval=never -o src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.deploy"
        },
        {
          "exec": "rm -fr src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout"
        },
        {
          "exec": "mv src/__tests__/backend/deny-list/integ/.tmp.deny-list.integ.cdkout.deploy src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout"
        },
        {
          "spawn": "integ:deny-list:destroy"
        }
      ]
    },
    "integ:deny-list:destroy": {
      "name": "integ:deny-list:destroy",
      "description": "destroy integration test __tests__/backend/deny-list/integ/deny-list.integ.ts",
      "steps": [
        {
          "exec": "cdk destroy --app src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout --no-version-reporting"
        }
      ]
    },
    "integ:deny-list:snapshot": {
      "name": "integ:deny-list:snapshot",
      "description": "update snapshot for integration test __tests__/backend/deny-list/integ/deny-list.integ.ts",
      "steps": [
        {
          "exec": "cdk synth --app \"node lib/__tests__/backend/deny-list/integ/deny-list.integ.js\" --no-version-reporting --context @aws-cdk/core:newStyleStackSynthesis=true -o src/__tests__/backend/deny-list/integ/deny-list.integ.cdkout > /dev/null"
        }
      ]
    },
    "integ:domain-redirect:assert": {
      "name": "integ:domain-redirect:assert",
      "description": "synthesize integration test __tests__/domain-redirect.integ.ts",
      "steps": [
        {
          "exec": "cdk synth --app \"node lib/__tests__/domain-redirect.integ.js\" --no-version-reporting --context @aws-cdk/core:newStyleStackSynthesis=true -o src/__tests__/.tmp.domain-redirect.integ.cdkout.actual > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json -x .cache src/__tests__/domain-redirect.integ.cdkout/ src/__tests__/.tmp.domain-redirect.integ.cdkout.actual/"
        }
      ]
    },
    "integ:domain-redirect:deploy": {
      "name": "integ:domain-redirect:deploy",
      "description": "deploy integration test __tests__/domain-redirect.integ.ts",
      "steps": [
        {
          "exec": "rm -fr src/__tests__/.tmp.domain-redirect.integ.cdkout.deploy"
        },
        {
          "exec": "cdk deploy --app \"node lib/__tests__/domain-redirect.integ.js\" --no-version-reporting --context @aws-cdk/core:newStyleStackSynthesis=true --require-approval=never -o src/__tests__/.tmp.domain-redirect.integ.cdkout.deploy"
        },
        {
          "exec": "rm -fr src/__tests__/domain-redirect.integ.cdkout"
        },
        {
          "exec": "mv src/__tests__/.tmp.domain-redirect.integ.cdkout.deploy src/__tests__/domain-redirect.integ.cdkout"
        },
        {
          "spawn": "integ:domain-redirect:destroy"
        }
      ]
    },
    "integ:domain-redirect:destroy": {
      "name": "integ:domain-redirect:destroy",
      "description": "destroy integration test __tests__/domain-redirect.integ.ts",
      "steps": [
        {
          "exec": "cdk destroy --app src/__tests__/domain-redirect.integ.cdkout --no-version-reporting"
        }
      ]
    },
    "integ:domain-redirect:snapshot": {
      "name": "integ:domain-redirect:snapshot",
      "description": "update snapshot for integration test __tests__/domain-redirect.integ.ts",
      "steps": [
        {
          "exec": "cdk synth --app \"node lib/__tests__/domain-redirect.integ.js\" --no-version-reporting --context @aws-cdk/core:newStyleStackSynthesis=true -o src/__tests__/domain-redirect.integ.cdkout > /dev/null"
        }
      ]
    },
    "integ:update": {
      "name": "integ:update",
      "description": "Run and update integration snapshot tests",
      "steps": [
        {
          "exec": "yarn integ-runner --language typescript --update-on-failed",
          "receiveArgs": true
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "if [ ! -z ${CI} ]; then rsync -a . .repo --exclude .git --exclude node_modules && rm -rf dist && mv .repo dist; else npx projen package-all; fi"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "jsii-pacmak -v --target js"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        },
        {
          "spawn": "rosetta:extract"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "rosetta:extract": {
      "name": "rosetta:extract",
      "description": "Test rosetta extract",
      "steps": [
        {
          "exec": "yarn --silent jsii-rosetta extract --strict"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --coverageProvider=v8 --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ"
        },
        {
          "spawn": "integ:domain-redirect:assert"
        },
        {
          "spawn": "integ:deny-list:assert"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "RELEASABLE_COMMITS": "git log --no-merges --oneline $LATEST_TAG..HEAD -E --grep '^(feat|fix){1}(\\([^()[:space:]]+\\))?(!)?:[[:blank:]]+.+'"
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "echo No dependencies to upgrade."
        }
      ]
    },
    "upgrade-cdklabs-projen-project-types": {
      "name": "upgrade-cdklabs-projen-project-types",
      "description": "upgrade cdklabs-projen-project-types",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=latest --peer --dep=dev,peer,prod,optional --filter=cdklabs-projen-project-types,projen"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade cdklabs-projen-project-types projen"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "upgrade-dev-deps": {
      "name": "upgrade-dev-deps",
      "description": "upgrade dev dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev --filter=@aws-cdk/aws-servicecatalogappregistry-alpha,@aws-sdk/client-sfn,@jsii/spec,@octokit/rest,@types/aws-lambda,@types/changelog-filename-regex,@types/fs-extra,@types/jest,@types/markdown-it,@types/markdown-it-emoji,@types/semver,@types/streamx,@types/tar-stream,@types/tough-cookie,@types/uuid,async-sema,aws-embedded-metrics,aws-sdk,aws-sdk-mock,aws-xray-sdk-core,case,cdk-dia,cdk-watchful,cdklabs-projen-project-types,changelog-filename-regex,construct-hub-webapp,dotenv,esbuild,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-prettier,feed,fs-extra,glob,got,jest,jsii-diff,jsii-pacmak,jsii-rosetta,jsii,JSONStream,markdown-it,markdown-it-emoji,nock,normalize-registry-metadata,prettier,projen,semver,spdx-license-list,streamcount,streamx,tar-stream,ts-node,typescript,uuid,yaml,@aws-cdk/integ-runner,@aws-cdk/integ-tests-alpha"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @aws-cdk/aws-servicecatalogappregistry-alpha @aws-sdk/client-sfn @jsii/spec @octokit/rest @types/aws-lambda @types/changelog-filename-regex @types/fs-extra @types/jest @types/markdown-it @types/markdown-it-emoji @types/node @types/semver @types/streamx @types/tar-stream @types/tough-cookie @types/uuid @typescript-eslint/eslint-plugin @typescript-eslint/parser async-sema aws-cdk-lib aws-cdk aws-embedded-metrics aws-sdk aws-sdk-mock aws-xray-sdk-core case cdk-dia cdk-watchful cdklabs-projen-project-types changelog-filename-regex construct-hub-webapp dotenv esbuild eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint feed fs-extra glob got jest jest-junit jsii-diff jsii-docgen jsii-pacmak jsii-rosetta jsii JSONStream markdown-it markdown-it-emoji nock normalize-registry-metadata prettier projen semver spdx-license-list standard-version streamcount streamx tar-stream ts-node typescript uuid yaml @aws-cdk/integ-runner @aws-cdk/integ-tests-alpha"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")",
    "NODE_OPTIONS": "--max-old-space-size=4096"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
