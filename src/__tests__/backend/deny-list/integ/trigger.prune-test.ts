// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
import * as path from 'path';
import { CustomResourceProvider, Stack } from 'aws-cdk-lib';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import { Trigger } from 'aws-cdk-lib/triggers';
import { Construct } from 'constructs';

export interface TriggerPruneTestProps extends lambda.FunctionOptions {
  /**
   * Trigger this handler after these constructs were deployed.
   * @default - trigger this handler after all implicit dependencies have been created
   */
  readonly executeAfter?: Construct[];
}

export class TriggerPruneTest extends lambda.Function {
  constructor(scope: Construct, id: string, props?: TriggerPruneTestProps) {
    super(scope, id, {
      description: '__tests__/backend/deny-list/integ/trigger.prune-test.lambda.ts',
      ...props,
      runtime: lambda.Runtime.NODEJS_14_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, '/trigger.prune-test.lambda.bundle')),
    });

    new Trigger(this, 'Trigger', {
      handler: this,
      executeAfter: props?.executeAfter,
    });

    const provider = Stack.of(scope).node.tryFindChild('AWSCDK.TriggerCustomResourceProviderCustomResourceProvider') as CustomResourceProvider;

    new iam.Policy(this, 'Policy', {
      force: true,
      roles: [iam.Role.fromRoleArn(this, 'Role', provider.roleArn)],
      statements: [
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: ['lambda:InvokeFunction'],
          resources: [`${this.functionArn}*`],
        }),
      ],
    });
  }
}