{
  "version": 3,
  "sources": ["../../../../../../src/__tests__/backend/deny-list/integ/trigger.prune-test.lambda.ts", "../../../../../../src/backend/shared/env.lambda-shared.ts"],
  "sourcesContent": ["import * as AWS from 'aws-sdk';\nimport { requireEnv } from '../../../../backend/shared/env.lambda-shared';\n\nconst s3 = new AWS.S3();\n\nexport async function handler() {\n  const bucketName = requireEnv('BUCKET_NAME');\n  const timeoutSec = parseInt(requireEnv('TIMEOUT_SEC'));\n  const expectedKeys = JSON.parse(requireEnv('EXPECTED_KEYS'));\n  const expected = canonicalRepresentation(expectedKeys);\n\n  console.log(JSON.stringify({ expected: expectedKeys }));\n\n  const startTime = Date.now();\n  let actual;\n  while ((Date.now() - startTime) / 1000 < timeoutSec) {\n    actual = canonicalRepresentation(await getAllObjectKeys(bucketName));\n    console.log(JSON.stringify({ keys: actual }));\n\n    if (actual === expected) {\n      console.log('assertion succeeded');\n      return;\n    }\n  }\n\n  throw new Error(\n    `assertion failed. the following objects were not deleted after ${timeoutSec}s. Actual: ${actual}. Expected: ${expected}`\n  );\n}\n\nasync function getAllObjectKeys(bucket: string) {\n  let continuationToken;\n  const objectKeys = new Array<string>();\n  do {\n    const listRequest: AWS.S3.ListObjectsV2Request = {\n      Bucket: bucket,\n      ContinuationToken: continuationToken,\n    };\n    console.log(JSON.stringify({ listRequest }));\n    const listResponse = await s3.listObjectsV2(listRequest).promise();\n    console.log(JSON.stringify({ listResponse }));\n    continuationToken = listResponse.NextContinuationToken;\n\n    for (const { Key: key } of listResponse.Contents ?? []) {\n      if (!key) {\n        continue;\n      }\n      objectKeys.push(key);\n    }\n  } while (continuationToken);\n\n  return objectKeys;\n}\n\nfunction canonicalRepresentation(list: string[]) {\n  return JSON.stringify(list.sort());\n}\n", "import { env } from 'process';\n\nexport function requireEnv(name: string): string {\n  const result = env[name];\n  if (!result) {\n    throw new Error(\n      `No value specified for required environment variable: ${name}`\n    );\n  }\n  return result;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAqB;;;ACArB,qBAAoB;AAEb,SAAS,WAAW,MAAsB;AAC/C,QAAM,SAAS,mBAAI,IAAI;AACvB,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI;AAAA,MACR,yDAAyD,IAAI;AAAA,IAC/D;AAAA,EACF;AACA,SAAO;AACT;;;ADPA,IAAM,KAAK,IAAQ,OAAG;AAEtB,eAAsB,UAAU;AAC9B,QAAM,aAAa,WAAW,aAAa;AAC3C,QAAM,aAAa,SAAS,WAAW,aAAa,CAAC;AACrD,QAAM,eAAe,KAAK,MAAM,WAAW,eAAe,CAAC;AAC3D,QAAM,WAAW,wBAAwB,YAAY;AAErD,UAAQ,IAAI,KAAK,UAAU,EAAE,UAAU,aAAa,CAAC,CAAC;AAEtD,QAAM,YAAY,KAAK,IAAI;AAC3B,MAAI;AACJ,UAAQ,KAAK,IAAI,IAAI,aAAa,MAAO,YAAY;AACnD,aAAS,wBAAwB,MAAM,iBAAiB,UAAU,CAAC;AACnE,YAAQ,IAAI,KAAK,UAAU,EAAE,MAAM,OAAO,CAAC,CAAC;AAE5C,QAAI,WAAW,UAAU;AACvB,cAAQ,IAAI,qBAAqB;AACjC;AAAA,IACF;AAAA,EACF;AAEA,QAAM,IAAI;AAAA,IACR,kEAAkE,UAAU,cAAc,MAAM,eAAe,QAAQ;AAAA,EACzH;AACF;AAEA,eAAe,iBAAiB,QAAgB;AAC9C,MAAI;AACJ,QAAM,aAAa,IAAI,MAAc;AACrC,KAAG;AACD,UAAM,cAA2C;AAAA,MAC/C,QAAQ;AAAA,MACR,mBAAmB;AAAA,IACrB;AACA,YAAQ,IAAI,KAAK,UAAU,EAAE,YAAY,CAAC,CAAC;AAC3C,UAAM,eAAe,MAAM,GAAG,cAAc,WAAW,EAAE,QAAQ;AACjE,YAAQ,IAAI,KAAK,UAAU,EAAE,aAAa,CAAC,CAAC;AAC5C,wBAAoB,aAAa;AAEjC,eAAW,EAAE,KAAK,IAAI,KAAK,aAAa,YAAY,CAAC,GAAG;AACtD,UAAI,CAAC,KAAK;AACR;AAAA,MACF;AACA,iBAAW,KAAK,GAAG;AAAA,IACrB;AAAA,EACF,SAAS;AAET,SAAO;AACT;AAEA,SAAS,wBAAwB,MAAgB;AAC/C,SAAO,KAAK,UAAU,KAAK,KAAK,CAAC;AACnC;",
  "names": []
}
