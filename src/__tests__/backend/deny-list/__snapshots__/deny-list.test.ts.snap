// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defaults - empty deny list 1`] = `
{
  "Outputs": {
    "DenyListSnapshotCommand31529C83": {
      "Description": "Snapshot Default/DenyList/Bucket",
      "Value": {
        "Fn::Join": [
          "",
          [
            "aws s3 sync s3://",
            {
              "Ref": "DenyListBucketC1C9D3D9",
            },
            " s3://",
            {
              "Ref": "DenyListFailoverBucketC0405145",
            },
          ],
        ],
      },
    },
    "MonitoringWatchfulWatchfulDashboard1D7DDB1C": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cloudwatch/home?region=",
            {
              "Ref": "AWS::Region",
            },
            "#dashboards:name=",
            {
              "Ref": "MonitoringWatchfulDashboard9EB9FD4D",
            },
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    notification_configuration = props["NotificationConfiguration"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']
    old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
    if managed:
      config = handle_managed(event["RequestType"], notification_configuration)
    else:
      config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
    s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
  def with_id(n):
    n['Id'] = f"{stack_id}-{hash(json.dumps(n, sort_keys=True))}"
    return n

  external_notifications = {}
  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
  for t in CONFIGURATION_TYPES:
    if request_type == 'Update':
        ids = [with_id(n) for n in old.get(t, [])]
        old_incoming_ids = [n['Id'] for n in ids]
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]
    elif request_type == 'Create':
        external_notifications[t] = [n for n in existing_notifications.get(t, [])]
  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  if request_type == 'Delete':
    return external_notifications

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))
",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CatalogBuilderMock263D4D67": {
      "DependsOn": [
        "CatalogBuilderMockServiceRole8558CA02",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "48cfb47ac396c48b9fe4f0abbce5c930416e1465d1411aa3d1086b77f2b1e3de.zip",
        },
        "Description": "__tests__/backend/deny-list/mocks/catalog-builder-mock.lambda.ts",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "CatalogBuilderMockServiceRole8558CA02",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "CatalogBuilderMockServiceRole8558CA02": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
      "DependsOn": [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "e976a796f036a5efbf44b99e44cfb5a961df08d8dbf7cd37e60bf216fb982a00.zip",
        },
        "Environment": {
          "Variables": {
            "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "DenyListBucketDeploymentAwsCliLayer4F94CAE9",
          },
        ],
        "Role": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DenyListBucketC1C9D3D9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DenyListBucketC1C9D3D9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": [
          {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "DenyListBucketC1C9D3D9",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DenyListBucketAllowBucketNotificationsToDenyListPrunePruneHandler6E446DC61E677015": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DenyListPrunePruneHandler5F946B07",
            "Arn",
          ],
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "DenyListBucketC1C9D3D9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DenyListBucketAutoDeleteObjectsCustomResource8261EE69": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "DenyListBucketPolicyFE28C82A",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "DenyListBucketC1C9D3D9",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "DenyListBucketC1C9D3D9": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
          {
            "Key": "aws-cdk:cr-owned:8385ed7a",
            "Value": "true",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "DenyListBucketDeploymentAwsCliLayer4F94CAE9": {
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "a912487bb1b34f5e5f6f07325f76f44d9faf30d9054d221303f1f3220d1d610e.zip",
        },
        "Description": "/opt/awscli/aws",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "DenyListBucketDeploymentCustomResource68E58740": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "DenyListBucketNotificationsEF0449EB",
      ],
      "Properties": {
        "DestinationBucketName": {
          "Ref": "DenyListBucketC1C9D3D9",
        },
        "Prune": true,
        "RetainOnDelete": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn",
          ],
        },
        "SourceBucketNames": [
          {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
        ],
        "SourceObjectKeys": [
          "8fb25fdd4f1ddeae2b028b9896c12ee4ce71b7b9a580a348a5d48a1459a2e064.zip",
        ],
      },
      "Type": "Custom::CDKBucketDeployment",
      "UpdateReplacePolicy": "Delete",
    },
    "DenyListBucketNotificationsEF0449EB": {
      "DependsOn": [
        "DenyListBucketAllowBucketNotificationsToDenyListPrunePruneHandler6E446DC61E677015",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "DenyListBucketC1C9D3D9",
        },
        "Managed": true,
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*",
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": "deny-list.json",
                    },
                    {
                      "Name": "prefix",
                      "Value": "deny-list.json",
                    },
                  ],
                },
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "DenyListPrunePruneHandler5F946B07",
                  "Arn",
                ],
              },
            },
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "DenyListBucketPolicyFE28C82A": {
      "Properties": {
        "Bucket": {
          "Ref": "DenyListBucketC1C9D3D9",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DenyListBucketC1C9D3D9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DenyListBucketC1C9D3D9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DenyListBucketC1C9D3D9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DenyListBucketC1C9D3D9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "DenyListFailoverBucketAutoDeleteObjectsCustomResource7D8B8ADF": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "DenyListFailoverBucketPolicy7EF208CC",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "DenyListFailoverBucketC0405145",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "DenyListFailoverBucketC0405145": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
          {
            "Key": "failover",
            "Value": "true",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "DenyListFailoverBucketPolicy7EF208CC": {
      "Properties": {
        "Bucket": {
          "Ref": "DenyListFailoverBucketC0405145",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DenyListFailoverBucketC0405145",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DenyListFailoverBucketC0405145",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DenyListFailoverBucketC0405145",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DenyListFailoverBucketC0405145",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "DenyListPeriodicPruneAllowEventRuleDenyListPrunePruneHandler6E446DC674D56F6A": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DenyListPrunePruneHandler5F946B07",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "DenyListPeriodicPruneC53BF9DB",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DenyListPeriodicPruneC53BF9DB": {
      "Properties": {
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "DenyListPrunePruneHandler5F946B07",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DenyListPruneDeleteQueueF9D9EBE3": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "VisibilityTimeout": 120,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "DenyListPrunePruneHandler5F946B07": {
      "DependsOn": [
        "DenyListPrunePruneHandlerServiceRoleDefaultPolicy7222934E",
        "DenyListPrunePruneHandlerServiceRole234C8EF9",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "6f18be8f6fbfa9cf8a02acd99617b97720109079fa0267426525cf1cb943b9de.zip",
        },
        "Description": "backend/deny-list/prune-handler.lambda.ts",
        "Environment": {
          "Variables": {
            "DENY_LIST_BUCKET_NAME": {
              "Ref": "DenyListBucketC1C9D3D9",
            },
            "DENY_LIST_OBJECT_KEY": "deny-list.json",
            "ON_CHANGE_FUNCTION_NAME": {
              "Fn::GetAtt": [
                "CatalogBuilderMock263D4D67",
                "Arn",
              ],
            },
            "PACKAGE_DATA_BUCKET_NAME": {
              "Ref": "PackageDataBucket1F18522B",
            },
            "PACKAGE_DATA_KEY_PREFIX": "my-data/",
            "PRUNE_QUEUE_URL": {
              "Ref": "DenyListPruneDeleteQueueF9D9EBE3",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "DenyListPrunePruneHandlerServiceRole234C8EF9",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DenyListPrunePruneHandlerServiceRole234C8EF9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DenyListPrunePruneHandlerServiceRoleDefaultPolicy7222934E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DenyListPruneDeleteQueueF9D9EBE3",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "PackageDataBucket1F18522B",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "PackageDataBucket1F18522B",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "DenyListBucketC1C9D3D9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "DenyListBucketC1C9D3D9",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CatalogBuilderMock263D4D67",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CatalogBuilderMock263D4D67",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DenyListPrunePruneHandlerServiceRoleDefaultPolicy7222934E",
        "Roles": [
          {
            "Ref": "DenyListPrunePruneHandlerServiceRole234C8EF9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DenyListPrunePruneQueueHandler087D6B50": {
      "DependsOn": [
        "DenyListPrunePruneQueueHandlerServiceRoleDefaultPolicy9ED3B9C8",
        "DenyListPrunePruneQueueHandlerServiceRole9BB94361",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "05bb438d3c600849fec31419f5aec6f9e1ca60c3edb12bcb60b4085a2b437da7.zip",
        },
        "Description": "backend/deny-list/prune-queue-handler.lambda.ts",
        "Environment": {
          "Variables": {
            "PACKAGE_DATA_BUCKET_NAME": {
              "Ref": "PackageDataBucket1F18522B",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "DenyListPrunePruneQueueHandlerServiceRole9BB94361",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "DenyListPrunePruneQueueHandlerServiceRole9BB94361": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DenyListPrunePruneQueueHandlerServiceRoleDefaultPolicy9ED3B9C8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:DeleteObject*",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "PackageDataBucket1F18522B",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "sqs:ReceiveMessage",
                "sqs:ChangeMessageVisibility",
                "sqs:GetQueueUrl",
                "sqs:DeleteMessage",
                "sqs:GetQueueAttributes",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "DenyListPruneDeleteQueueF9D9EBE3",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DenyListPrunePruneQueueHandlerServiceRoleDefaultPolicy9ED3B9C8",
        "Roles": [
          {
            "Ref": "DenyListPrunePruneQueueHandlerServiceRole9BB94361",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DenyListPrunePruneQueueHandlerSqsEventSourceDenyListPruneDeleteQueueA7D1B946A6A4141D": {
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "DenyListPruneDeleteQueueF9D9EBE3",
            "Arn",
          ],
        },
        "FunctionName": {
          "Ref": "DenyListPrunePruneQueueHandler087D6B50",
        },
      },
      "Type": "AWS::Lambda::EventSourceMapping",
    },
    "MonitoringHighSeverityDashboard17D9CD74": {
      "Properties": {
        "DashboardBody": "{"widgets":[]}",
      },
      "Type": "AWS::CloudWatch::Dashboard",
    },
    "MonitoringWatchfulDashboard9EB9FD4D": {
      "Properties": {
        "DashboardBody": {
          "Fn::Join": [
            "",
            [
              "{"widgets":[{"type":"text","width":24,"height":2,"x":0,"y":0,"properties":{"markdown":"# Deny List - Prune Function\\n\\n[button:AWS Lambda Console](https://console.aws.amazon.com/lambda/home?region=",
              {
                "Ref": "AWS::Region",
              },
              "#/functions/",
              {
                "Ref": "DenyListPrunePruneHandler5F946B07",
              },
              "?tab=graph) [button:CloudWatch Logs](https://console.aws.amazon.com/cloudwatch/home?region=",
              {
                "Ref": "AWS::Region",
              },
              "#logEventViewer:group=/aws/lambda/",
              {
                "Ref": "DenyListPrunePruneHandler5F946B07",
              },
              ")"}},{"type":"metric","width":6,"height":6,"x":0,"y":2,"properties":{"view":"timeSeries","title":"Invocations/5min","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Invocations","FunctionName","",
              {
                "Ref": "DenyListPrunePruneHandler5F946B07",
              },
              "",{"stat":"Sum"}]],"yAxis":{}}},{"type":"metric","width":6,"height":6,"x":6,"y":2,"properties":{"view":"timeSeries","title":"Errors/5min","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Errors","FunctionName","",
              {
                "Ref": "DenyListPrunePruneHandler5F946B07",
              },
              "",{"stat":"Sum"}]],"annotations":{"horizontal":[{"label":"Errors > 0 for 3 datapoints within 15 minutes","value":0,"yAxis":"left"}]},"yAxis":{}}},{"type":"metric","width":6,"height":6,"x":12,"y":2,"properties":{"view":"timeSeries","title":"Throttles/5min","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Throttles","FunctionName","",
              {
                "Ref": "DenyListPrunePruneHandler5F946B07",
              },
              "",{"stat":"Sum"}]],"annotations":{"horizontal":[{"label":"Throttles > 0 for 3 datapoints within 15 minutes","value":0,"yAxis":"left"}]},"yAxis":{}}},{"type":"metric","width":6,"height":6,"x":18,"y":2,"properties":{"view":"timeSeries","title":"Duration/5min","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Duration","FunctionName","",
              {
                "Ref": "DenyListPrunePruneHandler5F946B07",
              },
              "",{"label":"p99","stat":"p99"}]],"annotations":{"horizontal":[{"label":"p99 > 720000 for 3 datapoints within 15 minutes","value":720000,"yAxis":"left"}]},"yAxis":{}}},{"type":"text","width":24,"height":2,"x":0,"y":8,"properties":{"markdown":"# Deny List - Prune Delete Function\\n\\n[button:AWS Lambda Console](https://console.aws.amazon.com/lambda/home?region=",
              {
                "Ref": "AWS::Region",
              },
              "#/functions/",
              {
                "Ref": "DenyListPrunePruneQueueHandler087D6B50",
              },
              "?tab=graph) [button:CloudWatch Logs](https://console.aws.amazon.com/cloudwatch/home?region=",
              {
                "Ref": "AWS::Region",
              },
              "#logEventViewer:group=/aws/lambda/",
              {
                "Ref": "DenyListPrunePruneQueueHandler087D6B50",
              },
              ")"}},{"type":"metric","width":6,"height":6,"x":0,"y":10,"properties":{"view":"timeSeries","title":"Invocations/5min","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Invocations","FunctionName","",
              {
                "Ref": "DenyListPrunePruneQueueHandler087D6B50",
              },
              "",{"stat":"Sum"}]],"yAxis":{}}},{"type":"metric","width":6,"height":6,"x":6,"y":10,"properties":{"view":"timeSeries","title":"Errors/5min","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Errors","FunctionName","",
              {
                "Ref": "DenyListPrunePruneQueueHandler087D6B50",
              },
              "",{"stat":"Sum"}]],"annotations":{"horizontal":[{"label":"Errors > 0 for 3 datapoints within 15 minutes","value":0,"yAxis":"left"}]},"yAxis":{}}},{"type":"metric","width":6,"height":6,"x":12,"y":10,"properties":{"view":"timeSeries","title":"Throttles/5min","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Throttles","FunctionName","",
              {
                "Ref": "DenyListPrunePruneQueueHandler087D6B50",
              },
              "",{"stat":"Sum"}]],"annotations":{"horizontal":[{"label":"Throttles > 0 for 3 datapoints within 15 minutes","value":0,"yAxis":"left"}]},"yAxis":{}}},{"type":"metric","width":6,"height":6,"x":18,"y":10,"properties":{"view":"timeSeries","title":"Duration/5min","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[["AWS/Lambda","Duration","FunctionName","",
              {
                "Ref": "DenyListPrunePruneQueueHandler087D6B50",
              },
              "",{"label":"p99","stat":"p99"}]],"annotations":{"horizontal":[{"label":"p99 > 48000 for 3 datapoints within 15 minutes","value":48000,"yAxis":"left"}]},"yAxis":{}}}]}",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::Dashboard",
    },
    "MonitoringWatchfulDenyListPrunePruneHandler6E446DC6DurationAlarm3742CFF6": {
      "Properties": {
        "AlarmActions": [],
        "AlarmDescription": "p99 latency >= 720s (80%)",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 3,
        "Metrics": [
          {
            "Id": "m1",
            "Label": "p99",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "DenyListPrunePruneHandler5F946B07",
                    },
                  },
                ],
                "MetricName": "Duration",
                "Namespace": "AWS/Lambda",
              },
              "Period": 300,
              "Stat": "p99",
            },
            "ReturnData": true,
          },
        ],
        "Threshold": 720000,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "MonitoringWatchfulDenyListPrunePruneHandler6E446DC6ErrorsAlarm7E51A923": {
      "Properties": {
        "AlarmActions": [],
        "AlarmDescription": "Over 0 errors per minute",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "DenyListPrunePruneHandler5F946B07",
            },
          },
        ],
        "EvaluationPeriods": 3,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 0,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "MonitoringWatchfulDenyListPrunePruneHandler6E446DC6ThrottlesAlarmF6728CA1": {
      "Properties": {
        "AlarmActions": [],
        "AlarmDescription": "Over 0 throttles per minute",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "DenyListPrunePruneHandler5F946B07",
            },
          },
        ],
        "EvaluationPeriods": 3,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 0,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "MonitoringWatchfulDenyListPrunePruneQueueHandler7CD34449DurationAlarm79074D5F": {
      "Properties": {
        "AlarmActions": [],
        "AlarmDescription": "p99 latency >= 48s (80%)",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 3,
        "Metrics": [
          {
            "Id": "m1",
            "Label": "p99",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "DenyListPrunePruneQueueHandler087D6B50",
                    },
                  },
                ],
                "MetricName": "Duration",
                "Namespace": "AWS/Lambda",
              },
              "Period": 300,
              "Stat": "p99",
            },
            "ReturnData": true,
          },
        ],
        "Threshold": 48000,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "MonitoringWatchfulDenyListPrunePruneQueueHandler7CD34449ErrorsAlarmC83BF67E": {
      "Properties": {
        "AlarmActions": [],
        "AlarmDescription": "Over 0 errors per minute",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "DenyListPrunePruneQueueHandler087D6B50",
            },
          },
        ],
        "EvaluationPeriods": 3,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 0,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "MonitoringWatchfulDenyListPrunePruneQueueHandler7CD34449ThrottlesAlarm6BCD2D3B": {
      "Properties": {
        "AlarmActions": [],
        "AlarmDescription": "Over 0 throttles per minute",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "DenyListPrunePruneQueueHandler087D6B50",
            },
          },
        ],
        "EvaluationPeriods": 3,
        "MetricName": "Throttles",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 0,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "OverviewDashboardOverviewDashboardlambdaServiceQuotaAA204E67": {
      "Properties": {
        "AlarmDescription": "Lambda concurrent execution exceeded 70% of SERVICE_QUOTA

RunBook: https://github.com/cdklabs/construct-hub/blob/main/docs/operator-runbook.md

Request a service quota increase for lambda functions",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 5,
        "Metrics": [
          {
            "Expression": "mLambdaUsage / mLambdaQuota * 100",
            "Id": "expr_1",
            "Label": "Concurrent executions quota usage %",
          },
          {
            "Id": "mLambdaUsage",
            "MetricStat": {
              "Metric": {
                "MetricName": "ConcurrentExecutions",
                "Namespace": "AWS/Lambda",
              },
              "Period": 300,
              "Stat": "Maximum",
            },
            "ReturnData": false,
          },
          {
            "Expression": "SERVICE_QUOTA(mLambdaUsage)",
            "Id": "mLambdaQuota",
            "ReturnData": false,
          },
        ],
        "Threshold": 70,
        "TreatMissingData": "missing",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "OverviewDashboardOverviewdashboard17E450B5": {
      "Properties": {
        "DashboardBody": {
          "Fn::Join": [
            "",
            [
              "{"widgets":[{"type":"metric","width":12,"height":8,"x":0,"y":0,"properties":{"view":"timeSeries","title":"Lambda concurrent execution quota","region":"",
              {
                "Ref": "AWS::Region",
              },
              "","metrics":[[{"label":"Concurrent executions quota usage %","expression":"mLambdaUsage / mLambdaQuota * 100","yAxis":"right"}],["AWS/Lambda","ConcurrentExecutions",{"stat":"Maximum","visible":false,"id":"mLambdaUsage"}],[{"expression":"SERVICE_QUOTA(mLambdaUsage)","visible":false,"id":"mLambdaQuota"}],[{"label":"PruneHandlerLambda quota usage %","expression":"m1 / mLambdaQuota * 100","yAxis":"right"}],["AWS/Lambda","Invocations","FunctionName","",
              {
                "Ref": "DenyListPrunePruneHandler5F946B07",
              },
              "",{"label":"PruneHandlerLambda","stat":"Maximum","visible":false,"id":"m1"}],[{"expression":"SERVICE_QUOTA(mLambdaUsage)","visible":false,"id":"lambdaQuotaLimit"}],[{"label":"PruneQueueHandlerLambda quota usage %","expression":"m2 / mLambdaQuota * 100","yAxis":"right"}],["AWS/Lambda","Invocations","FunctionName","",
              {
                "Ref": "DenyListPrunePruneQueueHandler087D6B50",
              },
              "",{"label":"PruneQueueHandlerLambda","stat":"Maximum","visible":false,"id":"m2"}]],"annotations":{"horizontal":[{"value":70,"yAxis":"right"}]},"yAxis":{"right":{"label":"Quota Percent","min":0,"max":100}}}}]}",
            ],
          ],
        },
      },
      "Type": "AWS::CloudWatch::Dashboard",
    },
    "PackageDataBucket1F18522B": {
      "DeletionPolicy": "Retain",
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
