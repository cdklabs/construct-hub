import * as fs from 'fs';
import * as path from 'path';

/**
 * The construct-facing config interface
 */
export interface AppConfig {
  readonly hasAnalytics?: boolean;
  readonly disableFAQ?: boolean;
}

/**
 * The Config interface that the webapplication will be built with
 */
interface WebappConfig {
  readonly hasAnalytics: boolean;
  readonly disableContent: {
    faq: boolean;
  };
}

export class Config {
  private readonly config: AppConfig;
  private readonly outPath: string;

  constructor(config?: AppConfig, outPath?: string) {
    this.config = { ...config };
    this.outPath =
      outPath ?? path.join(__dirname, '..', '..', 'scripts', 'app-config.ts');
  }

  get initial(): WebappConfig {
    return {
      hasAnalytics: false,
      disableContent: {
        faq: false,
      },
    };
  }

  private get value(): WebappConfig {
    const { disableFAQ, ...config } = this.config;
    return {
      ...this.initial,
      ...config,
      disableContent: {
        ...this.initial.disableContent,
        faq: !!disableFAQ,
      },
    };
  }

  write() {
    const tsCode =
`/* eslint-disable */
// This file was generated by the construct-hub
import type { AppConfig } from "../types/config";

const config: AppConfig = ${JSON.stringify(this.value)};

export default config;
`;

    fs.writeFileSync(this.outPath, tsCode);
  }
}
